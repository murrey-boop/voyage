
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  emailVerified: 'emailVerified',
  image: 'image',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  phoneNumber: 'phoneNumber',
  address: 'address',
  city: 'city',
  country: 'country',
  postalCode: 'postalCode',
  resetToken: 'resetToken',
  resetTokenExpires: 'resetTokenExpires',
  resetTokenUsed: 'resetTokenUsed',
  resetTokenCreatedAt: 'resetTokenCreatedAt',
  resetTokenUpdatedAt: 'resetTokenUpdatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  itemId: 'itemId',
  createdAt: 'createdAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.TourScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  image: 'image'
};

exports.Prisma.TourAvailabilityScalarFieldEnum = {
  id: 'id',
  tourId: 'tourId',
  startDate: 'startDate',
  endDate: 'endDate',
  maxPeople: 'maxPeople',
  bookedSlots: 'bookedSlots'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  tourId: 'tourId',
  userId: 'userId',
  dealId: 'dealId',
  guests: 'guests',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  note: 'note',
  startDate: 'startDate',
  endDate: 'endDate',
  date: 'date'
};

exports.Prisma.DealScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  origin: 'origin',
  destination: 'destination',
  departureDate: 'departureDate',
  returnDate: 'returnDate',
  price: 'price',
  discountPrice: 'discountPrice',
  isStudentDeal: 'isStudentDeal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityId: 'entityId',
  userId: 'userId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealId: 'dealId',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  expires: 'expires',
  userId: 'userId'
};

exports.Prisma.VisaApplicationScalarFieldEnum = {
  id: 'id',
  visaType: 'visaType',
  country: 'country',
  fullName: 'fullName',
  email: 'email',
  phone: 'phone',
  travelDate: 'travelDate',
  returnDate: 'returnDate',
  createdAt: 'createdAt'
};

exports.Prisma.UploadedDocumentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  field: 'field',
  originalName: 'originalName',
  fileSize: 'fileSize',
  fileType: 'fileType',
  filePath: 'filePath',
  type: 'type',
  imagePreview: 'imagePreview',
  multiple: 'multiple',
  imageUrl: 'imageUrl',
  imageAlt: 'imageAlt',
  imageWidth: 'imageWidth',
  imageHeight: 'imageHeight',
  fileUrl: 'fileUrl',
  publicId: 'publicId',
  uploadedAt: 'uploadedAt',
  visaAppId: 'visaAppId'
};

exports.Prisma.VisaPromoScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  image: 'image',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  country: 'country',
  price: 'price',
  Image: 'Image',
  isFavorite: 'isFavorite'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Favorite: 'Favorite',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Tour: 'Tour',
  TourAvailability: 'TourAvailability',
  Booking: 'Booking',
  Deal: 'Deal',
  AdminLog: 'AdminLog',
  Wishlist: 'Wishlist',
  PasswordResetToken: 'PasswordResetToken',
  VisaApplication: 'VisaApplication',
  UploadedDocument: 'UploadedDocument',
  VisaPromo: 'VisaPromo'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\SUCLINXS TECH\\OneDrive\\project\\voyage2\\generated\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters"
    ],
    "sourceFilePath": "C:\\Users\\SUCLINXS TECH\\OneDrive\\project\\voyage2\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.11.0",
  "engineVersion": "9c30299f5a0ea26a96790e13f796dc6094db3173",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "datasource db {\n  provider     = \"postgresql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  output          = \"../generated/client\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\nmodel User {\n  id                  Int                  @id @default(autoincrement())\n  email               String               @unique\n  name                String?\n  emailVerified       DateTime?\n  image               String?\n  accounts            Account[]\n  sessions            Session[]\n  bookings            Booking[]\n  wishlists           Wishlist[]\n  favorites           Favorite[]\n  password            String\n  role                String               @default(\"USER\") // \"ADMIN\" or \"USER\"\n  createdAt           DateTime             @default(now())\n  updatedAt           DateTime             @updatedAt\n  phoneNumber         String?\n  address             String?\n  city                String?\n  country             String?\n  postalCode          String?\n  AdminLog            AdminLog[]\n  resetToken          String?\n  resetTokenExpires   DateTime?\n  resetTokenUsed      Boolean              @default(false)\n  resetTokenCreatedAt DateTime?\n  resetTokenUpdatedAt DateTime?\n  passwordResetTokens PasswordResetToken[]\n}\n\nmodel Account {\n  id                String  @id @default(uuid())\n  userId            Int\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@index([userId])\n}\n\nmodel Favorite {\n  id        Int      @id @default(autoincrement())\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  type      String // 'tours' | 'flights' | 'visas'\n  itemId    String // ID of favorited item\n  createdAt DateTime @default(now())\n\n  @@unique([userId, type, itemId])\n}\n\nmodel Session {\n  id           String   @id @default(uuid())\n  sessionToken String   @unique\n  userId       Int\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\nmodel Tour {\n  id           String             @id @default(uuid())\n  title        String\n  description  String?\n  price        Float\n  image        String?\n  bookings     Booking[]\n  availability TourAvailability[]\n}\n\nmodel TourAvailability {\n  id          String   @id @default(uuid())\n  tour        Tour     @relation(fields: [tourId], references: [id])\n  tourId      String\n  startDate   DateTime\n  endDate     DateTime\n  maxPeople   Int\n  bookedSlots Int      @default(0)\n\n  @@index([tourId])\n}\n\nmodel Booking {\n  id        String        @id @default(uuid())\n  tour      Tour          @relation(fields: [tourId], references: [id])\n  user      User          @relation(fields: [userId], references: [id])\n  deal      Deal?         @relation(fields: [dealId], references: [id])\n  tourId    String\n  userId    Int\n  dealId    String?\n  guests    Int\n  status    BookingStatus @default(PENDING)\n  createdAt DateTime      @default(now())\n  updatedAt DateTime      @updatedAt\n  note      String?\n  startDate DateTime\n  endDate   DateTime\n  date      DateTime\n\n  @@index([userId])\n  @@index([tourId])\n  @@index([dealId])\n}\n\nenum BookingStatus {\n  PENDING\n  CONFIRMED\n}\n\nmodel Deal {\n  id            String     @id @default(uuid())\n  title         String\n  description   String\n  origin        String\n  destination   String\n  departureDate DateTime\n  returnDate    DateTime?\n  price         Float\n  discountPrice Float?\n  isStudentDeal Boolean    @default(false)\n  createdAt     DateTime   @default(now())\n  updatedAt     DateTime   @updatedAt\n  bookings      Booking[]\n  wishlists     Wishlist[]\n}\n\nmodel AdminLog {\n  id        String   @id @default(uuid())\n  action    String // \"CREATE_BOOKING\", \"UPDATE_AVAILABILITY\", etc.\n  entityId  String\n  userId    Int\n  user      User     @relation(fields: [userId], references: [id])\n  metadata  Json?\n  createdAt DateTime @default(now())\n\n  @@index([userId])\n}\n\nmodel Wishlist {\n  id        String   @id @default(uuid())\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  deal      Deal     @relation(fields: [dealId], references: [id])\n  dealId    String\n  createdAt DateTime @default(now())\n\n  @@unique([userId, dealId])\n  @@index([userId])\n  @@index([dealId])\n}\n\nmodel PasswordResetToken {\n  id      String   @id @default(uuid())\n  token   String   @unique\n  expires DateTime\n  user    User     @relation(fields: [userId], references: [id])\n  userId  Int\n\n  @@index([userId])\n}\n\nmodel VisaApplication {\n  id         String             @id @default(cuid())\n  visaType   String\n  country    String\n  fullName   String\n  email      String\n  phone      String\n  travelDate DateTime\n  returnDate DateTime\n  documents  UploadedDocument[] // <-- One-to-many relationship\n  createdAt  DateTime           @default(now())\n}\n\nmodel UploadedDocument {\n  id           String          @id @default(cuid())\n  fileName     String\n  field        String\n  originalName String\n  fileSize     Int\n  fileType     String\n  filePath     String\n  type         String // e.g., 'passport', 'visa', 'flightItinerary', etc.\n  imagePreview Boolean?        @default(false)\n  multiple     Boolean?        @default(false)\n  imageUrl     String?\n  imageAlt     String?\n  imageWidth   Int?\n  imageHeight  Int?\n  fileUrl      String\n  publicId     String\n  uploadedAt   DateTime        @default(now())\n  visaApp      VisaApplication @relation(fields: [visaAppId], references: [id])\n  visaAppId    String\n\n  @@index([visaAppId])\n}\n\nmodel VisaPromo {\n  id          String   @id @default(uuid())\n  title       String\n  description String?\n  image       String?\n  startDate   DateTime\n  endDate     DateTime\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  country     String\n  price       Float\n  Image       String\n  isFavorite  Boolean? @default(false)\n\n  @@index([startDate])\n  @@index([endDate])\n}\n",
  "inlineSchemaHash": "fcc8c4f7526005d8dfab8c15497a16bf46a607a0bfa5db5797cf941b9871db8b",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToUser\"},{\"name\":\"wishlists\",\"kind\":\"object\",\"type\":\"Wishlist\",\"relationName\":\"UserToWishlist\"},{\"name\":\"favorites\",\"kind\":\"object\",\"type\":\"Favorite\",\"relationName\":\"FavoriteToUser\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postalCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"AdminLog\",\"kind\":\"object\",\"type\":\"AdminLog\",\"relationName\":\"AdminLogToUser\"},{\"name\":\"resetToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resetTokenExpires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"resetTokenUsed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"resetTokenCreatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"resetTokenUpdatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"passwordResetTokens\",\"kind\":\"object\",\"type\":\"PasswordResetToken\",\"relationName\":\"PasswordResetTokenToUser\"}],\"dbName\":null},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":null},\"Favorite\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"FavoriteToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":null},\"VerificationToken\":{\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Tour\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToTour\"},{\"name\":\"availability\",\"kind\":\"object\",\"type\":\"TourAvailability\",\"relationName\":\"TourToTourAvailability\"}],\"dbName\":null},\"TourAvailability\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tour\",\"kind\":\"object\",\"type\":\"Tour\",\"relationName\":\"TourToTourAvailability\"},{\"name\":\"tourId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"maxPeople\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"bookedSlots\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Booking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tour\",\"kind\":\"object\",\"type\":\"Tour\",\"relationName\":\"BookingToTour\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BookingToUser\"},{\"name\":\"deal\",\"kind\":\"object\",\"type\":\"Deal\",\"relationName\":\"BookingToDeal\"},{\"name\":\"tourId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"dealId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"guests\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookingStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"note\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Deal\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"origin\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"destination\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"departureDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"returnDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"discountPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"isStudentDeal\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToDeal\"},{\"name\":\"wishlists\",\"kind\":\"object\",\"type\":\"Wishlist\",\"relationName\":\"DealToWishlist\"}],\"dbName\":null},\"AdminLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entityId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AdminLogToUser\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Wishlist\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWishlist\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"deal\",\"kind\":\"object\",\"type\":\"Deal\",\"relationName\":\"DealToWishlist\"},{\"name\":\"dealId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"PasswordResetToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PasswordResetTokenToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"VisaApplication\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"visaType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"travelDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"returnDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"UploadedDocument\",\"relationName\":\"UploadedDocumentToVisaApplication\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"UploadedDocument\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"field\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"originalName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"fileType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"filePath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imagePreview\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"multiple\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageAlt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageWidth\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"imageHeight\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"fileUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"visaApp\",\"kind\":\"object\",\"type\":\"VisaApplication\",\"relationName\":\"UploadedDocumentToVisaApplication\"},{\"name\":\"visaAppId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"VisaPromo\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"Image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isFavorite\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

