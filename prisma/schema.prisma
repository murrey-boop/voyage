datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" 
}

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
  previewFeatures = ["driverAdapters"]
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  name                String?
  emailverified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  bookings            Booking[]
  wishlists           Wishlist[]
  password            String
  role                String               @default("USER") // "ADMIN" or "USER"
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  phoneNumber         String?
  address             String?
  city                String?
  country             String?
  postalCode          String?
  AdminLog            AdminLog[]
  verificationTokens  String?
  VerificationToken   String?
  resetToken          String?
  resetTokenExpires   DateTime?
  resetTokenUsed      Boolean              @default(false)
  resetTokenCreatedAt DateTime?
  resetTokenUpdatedAt DateTime?
  passwordResetTokens PasswordResetToken[]
}

model Account {
  id                String  @id @default(uuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tour {
  id           String             @id @default(uuid())
  title        String
  description  String?
  price        Float
  image        String?
  bookings     Booking[]
  availability TourAvailability[]
}

model TourAvailability {
  id          String   @id @default(uuid())
  tour        Tour     @relation(fields: [tourId], references: [id])
  tourId      String
  startDate   DateTime
  endDate     DateTime
  maxPeople   Int
  bookedSlots Int      @default(0)

  @@index([tourId])
}

model Booking {
  id        String        @id @default(uuid())
  tour      Tour          @relation(fields: [tourId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  deal      Deal?         @relation(fields: [dealId], references: [id])
  tourId    String
  userId    Int
  dealId    String?
  guests    Int
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  note      String?
  startDate DateTime
  endDate   DateTime
  date      DateTime

  @@index([userId])
  @@index([tourId])
  @@index([dealId])
}

enum BookingStatus {
  PENDING
  CONFIRMED
}

model Deal {
  id            String     @id @default(uuid())
  title         String
  description   String
  origin        String
  destination   String
  departureDate DateTime
  returnDate    DateTime?
  price         Float
  discountPrice Float?
  isStudentDeal Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bookings      Booking[]
  wishlists     Wishlist[]
}

model AdminLog {
  id        String   @id @default(uuid())
  action    String // "CREATE_BOOKING", "UPDATE_AVAILABILITY", etc.
  entityId  String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([userId])
}

model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  deal      Deal     @relation(fields: [dealId], references: [id])
  dealId    String
  createdAt DateTime @default(now())

  @@unique([userId, dealId])
  @@index([userId])
  @@index([dealId])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id])
  userId  Int

  @@index([userId])
}

model VisaApplication {
  id         String     @id @default(cuid())
  visaType   String
  country    String
  fullName   String
  email      String
  phone      String
  travelDate DateTime
  returnDate DateTime
  documents  Document[] // <-- One-to-many relationship
  createdAt  DateTime   @default(now())
}

model Document {
  id         String          @id @default(cuid())
  fileName   String
  fileUrl    String
  publicId   String
  uploadedAt DateTime        @default(now())
  visaApp    VisaApplication @relation(fields: [visaAppId], references: [id])
  visaAppId  String

  @@index([visaAppId])
}

model VisaPromo{
  id          String   @id @default(uuid())
  title       String
  description String?
  image       String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  country     String
  price       Float
  Image       String
  isFavorite  Boolean? @default(false)

  @@index([startDate])
  @@index([endDate])
}
